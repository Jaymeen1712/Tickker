// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

enum USER_ROLES {
  STANDARD
  ADMIN
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  username      String?      @unique
  emailVerified DateTime?
  password      String?
  image         String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  roles         USER_ROLES[] @default([STANDARD])
  accounts      Account[]
  sessions      Session[]
  Profile       Profile?

  @@unique([id, email])
  @@map("users")
}

model Profile {
  id           String    @id @default(cuid())
  userId       String    @unique
  name         String?
  lowResImage  String?
  highResImage String?
  username     String?   @unique
  email        String?   @unique
  Cart         Cart?
  Order        Order[]
  Product      Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([id, userId])
  @@map("profiles")
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Product {
  id          String   @id @default(cuid())
  profileId   String
  name        String
  price       Float
  model       String
  description String
  images      String[]
  stock       Int
  isVisible   Boolean  @default(true)

  // Watch-specific attributes
  brand           String
  category        String
  strap           String
  buckle          String
  strapSize       String
  movement        String
  waterResistance String
  caseMaterial    String
  caseDiameter    String
  dialColor       String

  reviews   Review[]
  CartItem  CartItem[]
  OrderItem OrderItem[]

  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("products")
}

model Review {
  id        String   @id @default(cuid())
  comment   String?
  userId    String
  productId String
  createdAt DateTime @default(now())

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("reviews")
}

model Cart {
  id        String     @id @default(uuid())
  profileId String     @unique
  cartItems CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  profile   Profile    @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@map("carts")
}

model CartItem {
  id        String   @id @default(uuid())
  productId String
  quantity  Int
  cartId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("cartItems")
}

model Order {
  id            String        @id @default(uuid())
  profileId     String
  orderItems    OrderItem[]
  amount        Float
  paymentStatus PaymentStatus @default(PENDING)
  // payment     Payment                         
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  profile       Profile       @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@map("orders")
}

model OrderItem {
  id             String          @id @default(uuid())
  productId      String
  productOwnerId String
  quantity       Int
  orderId        String
  price          Float
  status         OrderItemStatus @default(PENDING)
  createdAt      DateTime        @default(now())
  order          Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product        Product         @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("orderItems")
}

enum OrderItemStatus {
  // SHIPPED
  DELIVERED
  CANCELLED
  RETURNED
  PENDING
  FAILED
  PROCESSING
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

// model Payment {
//   id          String     @id @default(uuid())            // Unique identifier for the payment
//   order       Order      @relation(fields: [orderId], references: [id]) // Relation to Order model
//   orderId     String                                     // Foreign key for the order
//   amount      Float                                      // Amount paid
//   method      PaymentMethod                              // Payment method (e.g., 'CREDIT_CARD', 'PAYPAL')
//   status      PaymentStatus                              // Status of the payment (e.g., 'PENDING', 'COMPLETED')
//   transactionId String?                                  // Optional transaction ID from payment provider
//   createdAt   DateTime   @default(now())                 // Payment creation timestamp
// }

// -------------------------------------------------------------------------------------------
// Admin schemas
// -------------------------------------------------------------------------------------------
